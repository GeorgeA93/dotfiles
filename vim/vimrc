set nocompatible
filetype off
set number " line numbers
set history=1000 " lots of history
set clipboard=unnamed
set showmode " shows the current mode
set visualbell " turn that bell off
syntax on " Give me highlighting
set autoindent " indents plz
set smartindent
set smarttab
set shiftwidth=2
set autoread " reload files outside of vim
set softtabstop=2
set tabstop=2
set expandtab
set title
set mouse=a " mouse and scrolling plz
set ruler
set backspace=indent,eol,start
set scrolloff=3
set ignorecase " ignore case in searches
set smartcase " unless caps are in the search
set incsearch " search while composing regex
set showcmd " autocomplete commands
set autowrite " always write
set autowriteall
set nobackup " don't write junk files
set foldenable
set foldmethod=indent
set foldlevelstart=99 " Unfold everything when opening file
set foldlevel=100
set splitbelow " open new splits to the right and bottom
set splitright
set hlsearch
set guioptions= " hide scroll bars
set textwidth=80 " Default line length in chars
set directory=~/.vim/swapfiles//  " Change swapfile location for out of wd
set spell

" Change leader to Space
let mapleader = "\<Space>"

" fast save
nmap <leader>w :w!<cr>

" fast close buffer
map <leader>bd :bd<cr>

" close all buffers
map <leader>ba :bufdo bd<cr>

" Cycle through buffers
nnoremap <C-M> :bnext<CR>
nnoremap <C-P> :bprev<CR>

" THEME
set background=dark
colorscheme solarized
set guifont=Menlo\ Regular:h16 " increase that font size plz
set noshowmode " airline does this for us
set laststatus=2
let g:airline_theme='solarized'
let g:airline_solarized_bg='dark'
let g:airline#extensions#hunks#enabled=0
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#branch#enabled = 1
let g:airline_powerline_fonts = 1

" PLUGINS

call plug#begin('~/.vim/plugged')

Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'tpope/vim-rails'
Plug 'janko-m/vim-test'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'bling/vim-airline'
Plug 'Valloric/YouCompleteMe', { 'do': './install.py --gocode-completer' }
Plug 'vim-airline/vim-airline-themes'
Plug 'danro/rename.vim'
Plug 'tpope/vim-fugitive'
Plug 'jgdavey/vim-blockle'
Plug 'tpope/vim-commentary'
Plug 'vim-syntastic/syntastic'
Plug 'christoomey/vim-tmux-navigator'
Plug 'benmills/vimux'
Plug 'sheerun/vim-polyglot'
Plug 'honza/vim-snippets'
Plug 'SirVer/ultisnips'
Plug 'muziqiushan/vim-bufonly'
Plug 'tpope/vim-endwise'
Plug 'ryanss/vim-hackernews'
Plug 'terryma/vim-multiple-cursors'

call plug#end()

" Open NERDTree automatically when vim starts on a directory
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

" Open and close NERDTree
nnoremap <Leader>f :NERDTreeToggle<Enter>

" Open NERDTree on file I am editing
nnoremap <silent> <Leader>v :NERDTreeFind<CR>

" Close NERDTree tab if the only remaining window is NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1

" <Ctrl-l> redraws the screen and removes any search highlighting.
nnoremap <silent> <C-l> :nohl<CR><C-l>
" vim-test
nnoremap <silent> <Leader>g :TestFile<CR>
nnoremap <silent> <Leader>h :TestNearest<CR>
nnoremap <silent> <Leader>j :TestLast<CR>
nnoremap <silent> <Leader>k :TestSuite<CR>
let test#strategy = "vimux"
let test#ruby#rspec#options = '-fd'

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Get off my lawn
nnoremap <Left> :echoe "Use H!"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>

" Ag word under cursor
nnoremap <Leader>a :Ag <C-r><C-w><CR>

" FZF
nnoremap <silent> <Leader>p :Files<CR>

" syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

map <F5> :SyntasticCheck<CR>
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_ruby_checkers = ['']

" function to make tmux zoom its runner pane.
function! VimuxZoomRunner()
  call VimuxInspectRunner()
  call system("tmux resize-pane -Z")
endfunction

" zoom the tmux runner pane
map <Leader>vz :VimuxZoomRunner<CR>

" custom vimux commands
map <Leader>rc :call VimuxRunCommand("clear; rails c")<CR>
map <Leader>rs :call VimuxRunCommand("clear; rails s")<CR>

" snippets
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

" ycm
let g:ycm_min_num_of_chars_for_completion = 2
let g:ycm_min_num_identifier_candidate_chars = 2
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_add_preview_to_completeopt = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
nnoremap <leader>wg :YcmCompleter GoTo<CR>
nnoremap <leader>wd :YcmCompleter GoToDefinition<CR>
nnoremap <leader>wc :YcmCompleter GoToDeclaration<CR>

" move lines up and down
nnoremap ,j :<C-u>silent! move-2<CR>==
nnoremap ,k :<C-u>silent! move+<CR>==

" upcase word
nnoremap <Leader>u gUiw

" Automatic Filename expansions for commands
" Directory for current file
cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<cr>
" Current file name
cnoremap %f <C-R>=fnameescape(expand('%:t'))<cr>
" Full path for current file
cnoremap %a <C-R>=fnameescape(expand('%:p'))<cr>

if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif
:autocmd InsertEnter * set cul
:autocmd InsertLeave * set nocul
