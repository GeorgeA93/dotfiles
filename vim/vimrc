" PLUGINS

call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-rails'
Plug 'janko-m/vim-test'
Plug 'sheerun/vim-polyglot'
Plug 'https://github.com/fatih/vim-go', {'for': 'go'}
Plug 'zchee/deoplete-go', { 'do': 'make'}

let g:go_fmt_fail_silently = 0
let g:go_fmt_command = 'goimports'
let g:go_highlight_structs = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_textobj_enabled = 0


" language server
let g:LanguageClient_serverCommands = {
    \ 'ruby': ['solargraph', 'stdio'],
    \ }

function! ShellCommandSeperator()
  if empty(matchstr($SHELL, 'fish'))
    return '&&'
  else
    return '; and'
  endif
endfunction

let s:separator = ShellCommandSeperator()

function! GolangCwd()
  return escape(shellescape(expand('%:p:h'), 1), '$')
endfunction

function! GolangRun()
  call VimuxRunCommand('cd ' . GolangCwd() . ' ' . s:separator . ' clear ' . s:separator . ' go run ' . expand('%:t'))
endfunction

augroup vim_go
  autocmd!
  autocmd FileType go nmap <Leader>gx :call GolangRun()<CR>
  autocmd FileType go nmap <Leader>gb <Plug>(go-build)
  autocmd FileType go nmap <Leader>ge <Plug>(go-whicherrs)
  autocmd FileType go nmap <Leader>gt <Plug>(go-test)
  autocmd FileType go nmap <Leader>gc <Plug>(go-coverage)
  autocmd FileType go nmap <Leader>gf <Plug>(go-referrers)
  autocmd FileType go nmap <Leader>gi <Plug>(go-implements)
  autocmd FileType go nmap <Leader>gr <Plug>(go-rename)
  autocmd FileType go nmap <Leader>gdd <Plug>(go-def)
  autocmd FileType go nmap <Leader>gdv <Plug>(go-def-vertical)
  autocmd FileType go nmap <Leader>gdb <Plug>(go-def-tab)
  autocmd BufEnter *.go setlocal fdm=indent
augroup END
call plug#end()

" vim-test
nnoremap <silent> <Leader>g :TestFile<CR>
nnoremap <silent> <Leader>h :TestNearest<CR>
nnoremap <silent> <Leader>j :TestLast<CR>
nnoremap <silent> <Leader>k :TestSuite<CR>
let g:test#strategy = 'vimux'
let g:test#ruby#rspec#options = '-fd'

" ALE
let g:ale_fixers = {
\   'ruby': ['rubocop'],
\   'go': ['gofmt'],
\}

" custom vimux commands
map <Leader>rc :call VimuxRunCommand("clear; rails c")<CR>
map <Leader>rs :call VimuxRunCommand("clear; rails s")<CR>
